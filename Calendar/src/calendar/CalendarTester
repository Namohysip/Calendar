package calendar;

import static org.junit.Assert.*;
import java.util.ArrayList;
import org.junit.Test;

/*@author Jason Ramano*/

public class CalendarTester {
	/*
	 * Testing NO PARAMETER constructor of Event()
	 */
	@Test
	public void eventConstructorTest() {
		Event e = new Event();

		assertTrue(e.getDateTimeS() == null);
		assertTrue(e.getDateTimeE() == null);
		assertTrue(e.getClassType().equals("PUBLIC"));
		assertTrue(e.getDescription().equals(""));
		assertTrue(e.getLocation().equals(""));
		assertTrue(e.getStatus().equals("UNCONFIRMED"));
		assertTrue(e.getSummary().equals(""));
		assertTrue(e.getSequence() == 0);
		assertTrue(e.getPriority() == 0);
		assertTrue(e.getUid().endsWith("@Rambutan.team"));
		
		assertTrue(e.getDateTimeS().equals("20150404T050000"));
		assertTrue(e.getDateTimeE().equals("20150501T083000"));
		assertTrue(e.getTimeStamp().equals("20150404T050000"));
		assertTrue(e.getTimeCreated().equals("20150404T050000"));
		assertTrue(e.getLastModified().equals("20150404T050000"));
	}

	/*
	 * Testing WITH PARAMETERS constructor of Event()
	 */
	@Test
	public void eventConstructorTest2() {
		Event e = new Event("TestDescription", "TestSummary", "TestLocation",
				"TestTimeStart", "TestTimeEnd", "TestClassT", 1);

		assertTrue(e.getDateTimeS().equals("TestTimeStart"));
		assertTrue(e.getDateTimeE().equals("TestTimeEnd"));
		assertTrue(e.getClassType().equals("TestClassT"));
		assertTrue(e.getDescription().equals("TestDescription"));
		assertTrue(e.getLocation().equals("TestLocation"));
		assertTrue(e.getStatus().equals("CONFIRMED"));
		assertTrue(e.getSummary().equals("TestSummary"));
		assertTrue(e.getSequence() == 0);
		assertTrue(e.getPriority() == 1);
		assertTrue(e.getUid().endsWith("@Rambutan.team"));
		
		assertTrue(e.getDateTimeS().equals("20150404T050000"));
		assertTrue(e.getDateTimeE().equals("20150501T083000"));
		assertTrue(e.getTimeStamp().equals("20150404T050000"));
		assertTrue(e.getTimeCreated().equals("20150404T050000"));
		assertTrue(e.getLastModified().equals("20150404T050000"));
	}

	/**
	 * This test checks to make sure that adding an event to iCalendar correctly
	 * adds it in to the iCalendar event list.
	 */
	@Test
	public void AddingEventToCalendarTest() {
		iCalendar cal = new iCalendar();
		Event e = new Event();
		assertEquals(cal.getEvents().size(), 0);
		cal.addEvent(e);
		assertEquals(cal.getEvents().size(), 1);
	}

	/**
	 * This test checks to make sure if there is anything in the freeTime
	 * arraylist in iCalendar.
	 */
	@Test
	public void FreeTimeTest() {
		iCalendar cal = new iCalendar();
		ArrayList<Event> arrayEvents = new ArrayList<Event>();
		assertEquals(cal.findFreeTime(arrayEvents, "Friday").size(), 1);
	}

	/**
	 * This test checks that checkTime(String) properly returns false for a
	 * completely invalid entry for a date.
	 */
	@Test
	public void dateTestS1() {
		assertFalse(Driver.checkTime("abcde"));
	}

	/**
	 * This test checks that checkTime(String) properly returns false for an
	 * entry that is an integer, but not in the right syntax
	 */
	@Test
	public void dateTestS2() {
		assertFalse(Driver.checkTime("111111111111111"));
	}

	/**
	 * This test checks that checkTime(String) properly returns false for an
	 * entry that does not have a valid date.
	 */
	@Test
	public void dateTestS3() {
		assertFalse(Driver.checkTime("18009900T005555"));
	}

	/**
	 * This test checks that checkTime(String) returns true for a valid date.
	 */
	@Test
	public void dateTestS4() {
		assertTrue(Driver.checkTime("20120503T053000"));
	}

	/**
	 * Test for an invalid entry in all forms
	 */
	@Test
	public void dateTestI1() {
		assertFalse(Driver.checkTime(0, 0, 0, 0, 0, 0));
	}

	/**
	 * Test for invalid month
	 */
	@Test
	public void dateTestI2() {
		assertFalse(Driver.checkTime(2012, 13, 1, 0, 0, 0));
	}

	/**
	 * Test for invalid day
	 */
	@Test
	public void dateTestI3() {
		assertFalse(Driver.checkTime(2012, 3, 32, 0, 0, 0));
	}

	/**
	 * Test for invalid hour
	 */
	@Test
	public void dateTestI4() {
		assertFalse(Driver.checkTime(2012, 3, 12, 24, 0, 0));
	}

	/**
	 * Test for invalid minute
	 */
	@Test
	public void dateTestI5() {
		assertFalse(Driver.checkTime(2012, 3, 12, 12, 60, 0));
	}

	/**
	 * Test for invalid second
	 */
	@Test
	public void dateTestI6() {
		assertFalse(Driver.checkTime(2012, 3, 12, 12, 59, 60));
	}

	/**
	 * Test for a valid date; this one should be true
	 */
	@Test
	public void dateTestI7() {
		assertTrue(Driver.checkTime(2012, 3, 12, 12, 59, 0));
	}

	/**
	 * Test to make sure Feb 29 is only valid on leap years
	 */
	@Test
	public void dateTestI8() {
		assertFalse(Driver.checkTime(2013, 2, 29, 0, 0, 0));
	}

	/**
	 * Test to make sure Feb 29 is valid on a leap year, 2012
	 */
	@Test
	public void dateTestI9() {
		assertTrue(Driver.checkTime(2012, 2, 29, 0, 0, 0));
	}

	/**
	 * Test to make sure day 30 doesn't work on Feb
	 */
	@Test
	public void dateTestI10() {
		assertFalse(Driver.checkTime(2012, 2, 30, 0, 0, 0));
	}

	/**
	 * Test to make sure day 31 doesn't work on Nov
	 */
	@Test
	public void dateTestI11() {
		assertFalse(Driver.checkTime(2013, 11, 31, 0, 0, 0));
	}

	/**
	 * byFile should return null if a file is empty
	 */
	@Test
	public void byFileTestEmpty() {
		assertTrue(Driver
				.byFile(new String[] { "SourceTestFiles/testNull.ics" }) == null);
	}

	/**
	 * byFile should return null if the syntax for the calendar itself is
	 * incorrect.
	 */
	@Test
	public void byFileTestBadFormat() {
		assertTrue(Driver
				.byFile(new String[] { "SourceTestFiles/testBad.ics" }) == null);
	}

	/**
	 * byFile should work properly and have three events in the calendar
	 */
	@Test
	public void byFileTestGoodFormat() {
		iCalendar cal = Driver
				.byFile(new String[] { "SourceTestFiles/test.ics" });
		assertTrue(cal.getEvents().size() == 3);
		Event e = cal.getEvent(0);
		assertTrue(e.getSummary().equals("Morning Routine"));
		assertTrue(e.getDateTimeE().equals("20150404T100000"));
		assertTrue(e.getDateTimeS().equals("20150404T050000"));
		assertTrue(e.getClassType().equals("PUBLIC"));
		assertTrue(e.getDescription().equals(""));
		assertTrue(e.getLocation().equals("Anywhere"));
		assertTrue(e.getPriority() == 0);
		assertTrue(e.getSummary().equals("Morning Routine"));
	}

	/**
	 * Should be able to have the three good events even with
	 * a bad file attached
	 */
	@Test
	public void byFileTestGoodBad() {
		iCalendar cal = Driver.byFile(new String[] {
				"SourceTestFiles/test.ics", "SourceTestFiles/testBad.ics" });
		assertTrue(cal.getEvents().size() == 3);
		Event e = cal.getEvent(0);
		assertTrue(e.getSummary().equals("Morning Routine"));
		assertTrue(e.getDateTimeE().equals("20150404T100000"));
		assertTrue(e.getDateTimeS().equals("20150404T050000"));
		assertTrue(e.getClassType().equals("PUBLIC"));
		assertTrue(e.getDescription().equals(""));
		assertTrue(e.getLocation().equals("Anywhere"));
		assertTrue(e.getPriority() == 0);
		assertTrue(e.getSummary().equals("Morning Routine"));
	}
	
	/**
	 * Should be able to have three good events even when the
	 * first file is a bad file, but the next one is good
	 */
	@Test
	public void byFileTestBadGood(){
		iCalendar cal = Driver.byFile(new String[] {
				"SourceTestFiles/testBad.ics", "SourceTestFiles/test.ics" });
		assertTrue(cal.getEvents().size() == 3);
		Event e = cal.getEvent(0);
		assertTrue(e.getSummary().equals("Morning Routine"));
		assertTrue(e.getDateTimeE().equals("20150404T100000"));
		assertTrue(e.getDateTimeS().equals("20150404T050000"));
		assertTrue(e.getClassType().equals("PUBLIC"));
		assertTrue(e.getDescription().equals(""));
		assertTrue(e.getLocation().equals("Anywhere"));
		assertTrue(e.getPriority() == 0);
		assertTrue(e.getSummary().equals("Morning Routine"));
	}
	
	/**
	 * Should be able to combine two good events and have them all in one calendar
	 */
	@Test
	public void byFileTestGoodGood(){
		iCalendar cal = Driver.byFile(new String[] {
				"SourceTestFiles/testPriority.ics", "SourceTestFiles/test.ics" });
		assertTrue(cal.getEvents().size() == 6);
		
		Event e = cal.getEvent(0);
		assertTrue(e.getSummary().equals("Morning Routine"));
		assertTrue(e.getDateTimeE().equals("20150404T100000"));
		assertTrue(e.getDateTimeS().equals("20150404T050000"));
		assertTrue(e.getClassType().equals("PUBLIC"));
		assertTrue(e.getDescription().equals(""));
		assertTrue(e.getLocation().equals("Anywhere"));
		assertTrue(e.getPriority() == 5);
		assertTrue(e.getSummary().equals("Morning Routine"));
	}
	
	/**
	 * Tests priority remover. If no events are below that priority,
	 * then they should still be there afterward
	 */
	@Test
	public void removePriorityTestNone(){
		iCalendar cal = Driver.byFile(new String[] {
				"SourceTestFiles/testPriority.ics"});
		Driver.removeLowPriority(cal, 9);
		assertTrue(cal.getEvents().size() == 3);
	}
	
	/**
	 * If all events are below that priority, then they should be
	 * gone at an empty calendar afterward.
	 */
	@Test
	public void removePriorityTestAll(){
		iCalendar cal = Driver.byFile(new String[] {
				"SourceTestFiles/testPriority.ics"});
		Driver.removeLowPriority(cal, 1);
		assertTrue(cal.getEvents().size() == 0);
	}
	
	/**
	 * IF some of the events are below that priority, then 
	 * only those events should be removed
	 */
	@Test
	public void removePriorityTestSome(){
		iCalendar cal = Driver.byFile(new String[] {
				"SourceTestFiles/testMultiPriority.ics"});
		Driver.removeLowPriority(cal, 2);
		assertTrue(cal.getEvents().size() == 2);
	}
	
	/**
	 * Removing from an empty calendar should not return errors
	 * and just return an empty calendar as it was.
	 */
	@Test
	public void removePriorityTestEmpty(){
		iCalendar cal = new iCalendar();
		Driver.removeLowPriority(cal, 2);
		assertTrue(cal.getEvents().size() == 0);
	}
	
		/**
	 * Testing of adding events.
	 * Adding a blank event, event with proper start/finish times, events
	 * with improper times, and two events with exact same start/end times
	 */
	@Test
	public void testAddEvent() {
		Event e = new Event();
		iCalendar cal = new iCalendar();
		
		assertEquals(cal.getEvents().size(),0);
		cal.addEvent(e);
		assertEquals(cal.getEvents().size(),1);
		
	}
	
	@Test
	public void testAddEvent2(){
		String testTimeStart = "20150404T193000";
		String testTimeEnd = "20150404T230000";
		
		iCalendar cal = new iCalendar();
		
		Event e = new Event("TestDescription", "TestSummary", "TestLocation", testTimeStart,
				testTimeEnd, "TestClassT", 1);
		
		cal.addEvent(e);
		
		assertEquals(cal.getEvents().size(),1);
	}
	
	@Test
	public void testAddEvent3(){
		String testTimeStart = "20150404T230000";
		String testTimeEnd = "20150404T193000";
		iCalendar cal = new iCalendar();
		
		Event e = new Event("TestDescription", "TestSummary", "TestLocation", testTimeStart,
				testTimeEnd, "TestClassT", 1);
		
		cal.addEvent(e);
		assertEquals(cal.getEvents().size(),0);
	}
	
	@Test
	public void testAddEvent4(){
		String testTimeStart = "20150404T193000";
		String testTimeEnd = "20150404T230000";

		iCalendar cal = new iCalendar();
		
		Event e1 = new Event("TestDescription", "TestSummary", "TestLocation", testTimeStart,
				testTimeEnd, "TestClassT", 1);
		
		Event e2 = new Event("TestDescription", "TestSummary", "TestLocation", testTimeStart,
				testTimeEnd, "TestClassT", 1);
		
		cal.addEvent(e1);
		assertEquals(cal.getEvents().size(),1);
		
		cal.addEvent(e2);
		assertEquals(cal.getEvents().size(),1);
	
	}
	
	/**
	 * Generates a calendar, creates an event, adds to calendar.
	 * Tests if output matches the output of createics method.
	 */
	@Test
	public void testCreateics() {
		iCalendar cal = new iCalendar();
		String output;
		
		String testTimeStart = "20150404T193000";
		String testTimeEnd = "20150404T230000";
		String testDescription = "Rapping";
		String testSummary = "Mad flow";
		String testLocation = "The studio";
	

		Event e1 = new Event(testDescription,testSummary,testLocation, testTimeStart,
				testTimeEnd, "TestClassT", 1);
		
		String dtStamp = e1.getTimeCreated();
		String dtCreate = e1.getTimeStamp();
		String dtLastModified = e1.getLastModified();
		
		cal.addEvent(e1);
		assertEquals(cal.getEvents().size(),1);
		
		output = cal.createics();
	
		String expected = ("BEGIN:VEVENT\n" + testTimeStart + "\n" + testTimeEnd + "\n" + 
				dtStamp + "\nUID:\nCLASS:PUBLIC\n" + dtCreate + "\n" + testDescription
				+ "\n" + dtLastModified + "\n" + testLocation + "\nSEQUENCE:0\n" +
				"STATUS:CONFIRMED\n" + testSummary + "\nPRIORITY:0\nEND:VEVENT");
		
		
		assertEquals(expected,output);
		
		
	}

	/**
	 * unsure on how to test this. i think i need a plugin specific
	 * to j-unit and find what directory it outputs to.
	 */
	@Test
	public void testWriteics() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetEventSequence() {
		fail("Not yet implemented");
	}
	
	/**
	 * Checks to see if getEvent returns null
	 * upon entering index greater than total events.
	 */
	@Test
	public void testGetEventSequence() {
		iCalendar cal = new iCalendar();
		Event e = new Event();
		
		cal.addEvent(e);
		assertEquals(cal.getEvents().size(),1);
		
		assertNull(cal.getEvent(2));
		
	}
	
	@Test
	public void testGetEventSequence2() {
		iCalendar cal = new iCalendar();
		Event e = new Event();
		
		cal.addEvent(e);
		assertEquals(cal.getEvents().size(),1);
		
		assertNull(cal.getEvent(2));
		
	}
	
	@Test
	public void testFindFreeTime() {
		fail("Not yet implemented");
	}

	/**
	 * Tests getEvent(s) method. Tests for returning null
	 * on input index being greater size than array,
	 * and tests for equivalent arraylists.
	 */
	@Test
	public void testGetEvents() {
		Event e = new Event();
		iCalendar cal = new iCalendar();
		ArrayList<Event> evArray = new ArrayList<Event>();
		
		evArray.add(e);
		cal.addEvent(e);
		
		assertEquals(evArray,cal.getEvents());
		
		
	}

	@Test
	public void testGetEvent() {
		Event e = new Event();
		iCalendar cal = new iCalendar();
		
		cal.addEvent(e);
		
		assertEquals(e,cal.getEvent(0));
	}
	
	@Test
	public void testGetEvent2(){
		
		iCalendar cal = new iCalendar();
		assertNull(cal.getEvent(0));
		
		
	}
	
	

}

}
